---
import { Code, CardGrid, Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';
import enPO from './en.po?raw'
import esPO from './es.po?raw'
import enCompiled from './en.compiled.js?raw'
import esCompiled from './es.compiled.js?raw'
import React from './react/index.astro'
import Preact from './preact/index.astro'
import SolidJS from './solid/index.astro'
import Js from './js/index.astro'
import Ts from './ts/index.astro'
import Svelte from './svelte/index.astro'
import Python from './python/index.astro'
import Go from './go/index.astro'

const supported = [
	{icon: 'react', name: 'React', color: '#00D8FF'},
	{icon: 'preact', name: 'Preact', color: '#673ab8'},
	{icon: 'solid', name: 'SolidJS', color: '#76B3E1'},
	{icon: 'svelte', name: 'Svelte', color: '#FF3E00'},
	{icon: 'js', name: 'JavaScript', color: '#F7DF1E'},
	{icon: 'ts', name: 'TypeScript', color: '#3178C6'},
	{icon: 'python', name: 'Python*', color: '#327EBD', future: true},
	{icon: 'go', name: 'Golang*', color: '#00ACD7', future: true},
]
const active = 'react'
const inactiveSty = 'filter: grayscale(.7)'
const futureSty = 'filter: grayscale(1)'
---

<div
    class="container"
    data-supported={JSON.stringify(supported)}
    data-inactivesty={inactiveSty}
    data-futuresty={futureSty}
    data-active={active}
>
	{supported.map(({name, icon, future, color}) => 
        <div class="item">
			<div class="imgContainer" style={icon === active && `border-color: ${color}`}>
                <img
                    style={future ? futureSty : icon === active ? null : inactiveSty}
                    alt={`${name} Logo`}
                    src={`/images/${icon}.svg`}
                />
            </div>
			<span style={icon === active && `color: ${color}`}>{name}</span>
        </div>
    )}
</div>

{[
    <React />,
    <Preact />,
    <SolidJS />,
    <Svelte />,
    <Js />,
    <Ts />,
    <Python />,
    <Go />,
].map((component, i) => {
	const name = supported[i].icon
	return <div style={name !== active ? 'display: none' : ''} class={`code-${name}`}>{component}</div>
})}

<div class="translations-container">
	<Tabs syncKey="locale">
		<TabItem label="English">
			<div class="translations">
				<div>
                    <Code code={enPO + '\u200B' /* to keep whitespace */} lang="po" title="PO file (for translators)" />
				</div>
				<div>
					<Code code={enCompiled} lang="js" title="Compiled JS (for runtime)" />
				</div>
			</div>
		</TabItem>
		<TabItem label="Spanish (translated)">
			<div class="translations">
				<div>
					<Code code={esPO + '\u200B'} lang="po" title="PO file (for translators)" />
				</div>
				<div>
					<Code code={esCompiled} lang="js" title="Compiled JS (for runtime)" />
				</div>
			</div>
		</TabItem>
	</Tabs>
</div>

<script>
const container = document.querySelector('.container')
const data = container.dataset
const supported = JSON.parse(data.supported)
const entries = container.children
const codes = supported.map(s => document.querySelector(`.code-${s.icon}`))
const translations = document.querySelector('.translations-container')

for (const [i, item] of Array.from(entries).entries()) {
    item.addEventListener('click', () => {
        for (const [j, itm] of Array.from(entries).entries()) {
			const imgContainer = itm.children[0]
            const img = imgContainer.children[0]
			const name = itm.children[1]
            if (i !== j) {
				imgContainer.style = null
				name.style = null
				if (!supported[j].future) {
					img.style = data.inactivesty
				}
                codes[j].style.display = 'none'
                continue
            }
            if (supported[i].future) {
                img.style = data.futuresty
				translations.style = data.futuresty
            } else {
                img.style = null
				translations.style = null
            }
            codes[i].style = null
			imgContainer.style.borderColor = supported[i].color
			name.style.color = supported[i].color
        }
    })
}
</script>

<style>
    .container {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-end;
    }
    .item {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 1em;
        cursor: pointer;
    }
    .imgContainer {
        width: 6em;
        height: 6em;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        border: .1em solid grey;
    }
    img {
        width: 50%;
        margin: 1em;
    }

    .translations {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        width: 100%;
    }

    .translations div {
        margin: 0;
        flex-grow: 1;
    }
</style>
